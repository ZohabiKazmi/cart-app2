<style>
  .shipping-remaining-container {
    padding: 12px;
    background: {{ block.settings.card_background_color }};
    margin: 10px 0;
    border: 1px solid #e7e5e5;
    border-radius: {{ block.settings.border_radius }}px;
  }
  .shipping-message {
    text-align: center;
    margin-bottom: 8px;
    font-size: 14px;
  }
  .shipping-progress-bar {
    height: 8px;
    background: {{ block.settings.bar-bg }};
    border-radius: {{ block.settings.border_radius }}px;
    margin: 8px 0;
    overflow: hidden;
  }
  .progress-fill {
    height: 100%;
    background: {{ block.settings.progress_color }};
    transition: width 0.3s ease;
  }
  .benefits-container {
    display: flex;
    justify-content: space-between;
    font-size: 12px;
    color: {{ block.settings.text_color }};
  }
  .z-announcement{
    color: {{ block.settings.text_color }};
  }
  </style>
  

  
<div id="cart-progress-bar" class="shipping-remaining-container" x-data="cartProgress">
  <div class="shipping-message" x-show="spendingGoals.length > 0">
    <span class="z-announcement" x-text="getCurrentMessage()"></span>
  </div>

  <div class="shipping-progress-bar" x-show="spendingGoals.length > 0">
    <div class="progress-fill" 
         x-bind:style="'width: ' + calculateTotalProgress() + '%'">
    </div>
  </div>

  <div class="benefits-container" x-show="spendingGoals.length > 0">
    <template x-for="goal in spendingGoals" :key="goal.spendingGoal">
      <span x-text="getBenefitText(goal)"></span>
    </template>
  


<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>

<script>
  document.addEventListener('alpine:init', () => {
  Alpine.data('cartProgress', () => ({
    spendingGoals: [],
    cartTotal: 0, 
    appUrl: "https://wherever-volunteers-distributed-screensavers.trycloudflare.com",

    init() {
      this.fetchSpendingGoals();
      this.fetchCartTotal(); // Fetch initial cart total

      // Listen for cart updates
      document.addEventListener('cart:updated', () => {
        this.fetchCartTotal(); // Fetch updated cart total
        this.refreshValues(); // Recalculate progress and message
      });

      setInterval(() => {
        this.fetchCartTotal(); 
      }, 1000); 
    },

    async fetchCartTotal() {
      try {
        const response = await fetch('/cart.js'); // Shopify's cart API
        const data = await response.json();
        // Check if the cart total has changed
        if (this.cartTotal !== data.total_price) {
          this.cartTotal = data.total_price; 
          // console.log('Cart total updated:', this.cartTotal);
        }
      } catch (error) {
        console.error('Error fetching cart total:', error);
      }
    },

    async fetchSpendingGoals() {
      try {
        const shop = "{{ shop.permanent_domain }}";
        const response = await fetch(`${this.appUrl}/api/cart?shop=${shop}`);
        const data = await response.json();
        if (data.success) {
          this.spendingGoals = data.data.sort((a, b) => a.spendingGoal - b.spendingGoal);
        }
      } catch (error) {
        console.error('Error fetching goals:', error);
      }
      this.refreshValues();
    },

    refreshValues() {
      this.calculateTotalProgress(); // Recalculate progress bar
      this.getCurrentMessage(); // Refresh the announcement message
    },

    calculateTotalProgress() {
      const cartValue = this.cartTotal / 100;
      const maxGoal = Math.max(...this.spendingGoals.map(g => g.spendingGoal));
      return Math.min(100, (cartValue / maxGoal) * 100); // Return progress as a percentage
    },

    getCurrentMessage() {
      const cartValue = this.cartTotal / 100;
      const nextGoal = this.spendingGoals.find(g => g.spendingGoal > cartValue);

      if (!nextGoal) return `You've unlocked all benefits!`;
      return nextGoal.announcement.replace(/\{\{amount_left\}\}/g, 
        `$${(nextGoal.spendingGoal - cartValue).toFixed(2)}`);
    },

    getBenefitText(goal) {
      if (goal.selectedTab === 1) return `${goal.percentageDiscount}% off`;
      if (goal.selectedTab === 2) return `$${goal.fixedAmountDiscount} off`;
      if (goal.selectedTab === 0) return 'Free shipping';
      return '';
    }
  }));
});

  
</script>

</div>


  {% schema %}
    {
      "name": "cart-progress-bar",
      "target": "cart",
      "settings": [
        {
          "type": "number",
          "id": "border_radius",
          "label": "Card Border Radius",
          "default": 8
        },
        {
          "type": "color",
          "id": "progress_color",
          "label": "Progress Bar Color",
          "default": "#000000"
        },
        {
          "type": "color",
          "id": "card_background_color",
          "label": "Card Background Color",
          "default": "#ffffff"
        },
        {
          "type": "color",
          "id": "text_color",
          "label": "Text Color",
          "default": "#666"
        },        
        {
          "type": "color",
          "id": "bar-bg",
          "label": "Progress Bar Background Color",
          "default": "#eee"
        }        
      ]
    }
    {% endschema %}
<style>
  <div class="shipping-remaining-container">
  <style>
    .shipping-remaining-container {
      padding: 12px;
      background: white;
      margin: 10px 0;
      border: 1px solid #e7e5e5;
      border-radius: 8px;
    }
    .shipping-message {
      text-align: center;
      margin-bottom: 8px;
      font-size: 14px;
    }
    .shipping-progress-bar {
      height: 8px;
      background: #eee;
      border-radius: 4px;
      margin: 8px 0;
      overflow: hidden;
    }
    .progress-fill {
      height: 100%;
      background: #000;
      transition: width 0.3s ease;
    }
    .benefits-container {
      display: flex;
      justify-content: space-between;
      font-size: 12px;
      color: #666;
    }
  </style>

  <div x-data="cartProgress">
    <div class="shipping-message" x-show="spendingGoals.length > 0">
      <span x-text="getCurrentMessage()"></span>
    </div>

    <div class="shipping-progress-bar" x-show="spendingGoals.length > 0">
      <div class="progress-fill" 
           :style="'width: ' + calculateTotalProgress() + '%'" 
           x-bind:style="'width: ' + calculateTotalProgress() + '%'" 
           x-text="calculateTotalProgress() + '%'">
      </div>
    </div>

    <div class="benefits-container" x-show="spendingGoals.length > 0">
      <template x-for="goal in spendingGoals" :key="goal.spendingGoal">
        <span x-text="getBenefitText(goal)"></span>
      </template>
    </div>
  </div>

  <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
  <script>
    document.addEventListener('alpine:init', () => {
      Alpine.data('cartProgress', () => ({
        spendingGoals: [],
        cartTotal: {{ cart.total_price }},
        appUrl: "https://pressure-under-vacancies-beauty.trycloudflare.com",

        init() {
          this.fetchSpendingGoals();
          document.addEventListener('cart:updated', (event) => {
            this.cartTotal = event.detail.cart.total_price;
            this.updateProgress();
          });
        },

        updateProgress() {
          this.calculateTotalProgress();
          this.getCurrentMessage();
        },

        async fetchSpendingGoals() {
          try {
            const shop = "{{ shop.permanent_domain }}";
            const response = await fetch(`${this.appUrl}/api/cart?shop=${shop}`);
            const data = await response.json();
            if (data.success) {
              this.spendingGoals = data.data.sort((a, b) => a.spendingGoal - b.spendingGoal);
            }
          } catch (error) {
            console.error('Error fetching goals:', error);
          }
          this.updateProgress();
        },

        calculateTotalProgress() {
          const cartValue = this.cartTotal / 100;
          const maxGoal = Math.max(...this.spendingGoals.map(g => g.spendingGoal));
          return Math.min(100, (cartValue / maxGoal) * 100);
        },

        getCurrentMessage() {
          const cartValue = this.cartTotal / 100;
          const nextGoal = this.spendingGoals.find(g => g.spendingGoal > cartValue);
          
          if (!nextGoal) return `You've unlocked all benefits!`;
          return nextGoal.announcement.replace('{{amount_left}}', 
            `$${(nextGoal.spendingGoal - cartValue).toFixed(2)}`);
        },

        getBenefitText(goal) {
          if (goal.selectedTab === 0) return 'Free shipping';
          if (goal.selectedTab === 1) return `${goal.percentageDiscount}% off`;
          if (goal.selectedTab === 2) return `$${goal.fixedAmountDiscount} off`;
          return '';
        }
      }));
    });
  </script>
</div>


  {% schema %}
    {
      "name": "cart-progress-bar",
      "target": "section",
      "settings": [
        {
          "type": "range",
          "id": "border_radius",
          "label": "Border Radius",
          "min": 0,
          "max": 20,
          "step": 1,
          "default": 4,
          "unit": "px"
        },
        {
          "type": "range",
          "id": "border_width",
          "label": "Border Width",
          "min": 0,
          "max": 5,
          "step": 1,
          "default": 1,
          "unit": "px"
        },
        {
          "type": "range",
          "id": "progress_height",
          "label": "Progress Bar Height",
          "min": 2,
          "max": 20,
          "step": 1,
          "default": 8,
          "unit": "px"
        },
        {
          "type": "color",
          "id": "progress_color",
          "label": "Progress Bar Color",
          "default": "#000000"
        }
      ]
    }
    {% endschema %}
<div x-data="cartProgress">
  <template x-for="(goal, index) in spendingGoals" :key="index">
    <div class="shipping-remaining-container" 
         :data-threshold="goal.spendingGoal * 100"
         :data-cart-total="cartTotal"
         :data-index="index">
      <div class="shipping-bar-wrapper">
        <div class="shipping-message">
          <span x-text="getProgressMessage(goal, index)"></span>
        </div>

        <div class="shipping-progress-bar">
          <div class="progress-fill" 
               :style="'width: ' + calculateProgress(goal.spendingGoal * 100) + '%'"></div>
        </div>

        <div class="status-text">
          <span>$0</span>
          <span x-text="'$' + goal.spendingGoal"></span>
        </div>
      </div>
    </div>
  </template>
</div>

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('cartProgress', () => ({
      spendingGoals: [],
      cartTotal: {{ cart.total_price }},
      appUrl: "https://waterproof-conviction-tunisia-lancaster.trycloudflare.com/",

      init() {
        this.fetchSpendingGoals();
        
        // Listen for cart updates
        document.addEventListener('cart:updated', (event) => {
          this.cartTotal = event.detail.cart.total_price;
        });
      },

      async fetchSpendingGoals() {
        try {
          const response = await fetch(this.appUrl + "api/cart-progress?shop={{ shop.permanent_domain }}");
          const result = await response.json();
          this.spendingGoals = result.data;
        } catch (error) {
          console.error('Error fetching spending goals:', error);
        }
      },

      calculateProgress(threshold) {
        return Math.min(100, (this.cartTotal / threshold) * 100);
      },

      getProgressMessage(goal, index) {
        const threshold = goal.spendingGoal * 100;
        if (this.cartTotal >= threshold) {
          switch(goal.selectedTab) {
            case 0:
              return goal.freeShipping;
            case 1:
              return `${goal.percentageDiscount}% off`;
            case 2:
              return `$${goal.fixedAmountDiscount} off`;
          }
        } else {
          const remaining = threshold - this.cartTotal;
          return goal.announcement.replace('{{amount_left}}', Shopify.formatMoney(remaining));
        }
      }
    }));
  });
</script>

<style>
.shipping-remaining-container {
  padding: 12px;
  background: white;
  margin: 10px 0;
  border: 1px solid #e7e5e5;
}

.shipping-message {
  text-align: center;
  margin-bottom: 8px;
  font-size: 14px;
}

.shipping-progress-bar {
  height: 8px;
  background: #eee;
  margin: 8px 0;
  overflow: hidden;
}

.progress-fill {
  height: 100%;
  background: #000;
  transition: width 0.3s ease;
}

.status-text {
  display: flex;
  justify-content: space-between;
  font-size: 12px;
  color: #666;
}
</style>

{% schema %}
  {
    "name": "cart-progress-bar",
    "target": "section",
    "settings": [
      {
        "type": "range",
        "id": "border_radius",
        "label": "Border Radius",
        "min": 0,
        "max": 20,
        "step": 1,
        "default": 4,
        "unit": "px"
      },
      {
        "type": "range",
        "id": "border_width",
        "label": "Border Width",
        "min": 0,
        "max": 5,
        "step": 1,
        "default": 1,
        "unit": "px"
      },
      {
        "type": "range",
        "id": "progress_height",
        "label": "Progress Bar Height",
        "min": 2,
        "max": 20,
        "step": 1,
        "default": 8,
        "unit": "px"
      },
      {
        "type": "color",
        "id": "progress_color",
        "label": "Progress Bar Color",
        "default": "#000000"
      }
    ]
  }
  {% endschema %}